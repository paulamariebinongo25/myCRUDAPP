{"version":3,"sources":["components/tables/ListOfTodoTable.jsx","components/forms/AddTodoForm.jsx","components/forms/EditTodoForm.jsx","App.js","serviceWorker.js","index.js"],"names":["ListOfTodoTable","props","className","todos","length","map","todo","key","id","name","onClick","editRow","deleteTodo","colSpan","disabled","class","AddTodoForm","initialFormState","Date","getTime","useState","setTodo","onSubmit","e","preventDefault","addTodo","type","value","onChange","target","EditTodoForm","currentTodo","useEffect","updateTodo","setEditing","App","initialTodos","localStorage","getItem","JSON","parse","setTodos","setItem","stringify","setCurrentTodo","editing","updatedTodo","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a50f8749.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ListOfTodoTable = props => (\r\n  <table className=\"table is-bordered is-striped is-narrow is-hoverable is-fullwidth\">\r\n    <thead>\r\n      <tr>\r\n        <th className=\"title is-6 has-text-centered\">Name</th>\r\n\r\n        <th className=\"title is-6 has-text-centered\">Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.todos.length > 0 ? (\r\n        props.todos.map(todo => (\r\n          <tr key={todo.id}>\r\n            <td className=\"subtitle is-6 has-text-centered\">{todo.name}</td>\r\n\r\n            <td className=\"level\">\r\n              <div className=\"level-item has-text-centered\">\r\n                <div className=\"buttons\">\r\n                  <button\r\n                    onClick={() => {\r\n                      props.editRow(todo);\r\n                    }}\r\n                    className=\"button is-link is-hovered is-focused is-active\"\r\n                  >\r\n                    <span className=\"icon is-left\">\r\n                      <i className=\"fas fa-pen\"></i>\r\n                    </span>\r\n                    <span>Edit</span>\r\n                  </button>\r\n                  <button\r\n                    onClick={() => props.deleteTodo(todo.id)}\r\n                    className=\"button is-danger is-hovered is-focused is-active\"\r\n                  >\r\n                    <span className=\"icon is-left\">\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </span>\r\n                    <span>Delete</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n        <tr>\r\n          <td colSpan={1}>\r\n            <div className=\"subtitle is-5  has-text-centered\">No Todos</div>\r\n          </td>\r\n          <td className=\"level\">\r\n            <div className=\"level-item has-text-centered\">\r\n              <div className=\"buttons\">\r\n                <button\r\n                  className=\"button is-link is-hovered is-focused is-active\"\r\n                  disabled\r\n                >\r\n                  <span class=\"icon is-left\">\r\n                    <i class=\"fas fa-pen\"></i>\r\n                  </span>\r\n                  <span>Edit</span>\r\n                </button>\r\n                <button\r\n                  className=\"button is-danger is-hovered is-focused is-active\"\r\n                  disabled\r\n                >\r\n                  <span class=\"icon is-left\">\r\n                    <i class=\"fas fa-trash\"></i>\r\n                  </span>\r\n                  <span>Delete</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nexport default ListOfTodoTable;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddTodoForm = props => {\r\n  const initialFormState = { id: new Date().getTime(), name: \"\" };\r\n  const [todo, setTodo] = useState(initialFormState);\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    setTodo({ ...todo, [name]: value });\r\n  };\r\n\r\n  const clearTodoItem = () => {\r\n    setTodo({ name: \"\" });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!todo.name) return;\r\n\r\n    props.addTodo(todo);\r\n    clearTodoItem();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"square columns is-mobile is-desktop is-centered\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <div className=\"box1 box\">\r\n        <div className=\"title is-4 has-text-centered\">Add Todo</div>\r\n        <div className=\"field\">\r\n          <label className=\"subtitle is-6 has-text-centered\">Title Name</label>\r\n          <div className=\"control\">\r\n            <input\r\n              className=\"input is-black is-normal\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={todo.name}\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* <div className=\"level\">\r\n          <div className=\"level-item has-centered\">\r\n            <div className=\"field\">\r\n              <div>todoname</div>\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input is-black is-normal\"\r\n                  type=\"text\"\r\n                  name=\"todoname\"\r\n                  value={todo.todoname}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"level\">\r\n          <div className=\"level-item has-centered\">\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <button className=\"button is-rounded is-black is-fullwidth\">\r\n                  Add New Todo\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddTodoForm;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst EditTodoForm = props => {\r\n  const [todo, setTodo] = useState(props.currentTodo);\r\n\r\n  useEffect(() => {\r\n    setTodo(props.currentTodo);\r\n  }, [props]);\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    setTodo({ ...todo, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    props.updateTodo(todo.id, todo);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"square columns is-mobile is-centered\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <div className=\"box\">\r\n        <div className=\"title is-4 has-text-centered\">Edit todo</div>\r\n        <div className=\"level\">\r\n          <div className=\"level-item has-centered\">\r\n            <div className=\"field\">\r\n              <label>Name</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input is-black is-normal\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={todo.name}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <div className=\"level\">\r\n          <div className=\"level-item has-centered\">\r\n            <div className=\"field\">\r\n              <label>todoname</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input is-black is-normal\"\r\n                  type=\"text\"\r\n                  name=\"todoname\"\r\n                  value={todo.todoname}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"level\">\r\n          <div className=\"level-item has-centered\">\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <div className=\"buttons\">\r\n                  <button className=\"button is-rounded is-black\">\r\n                    Edit Todo\r\n                  </button>\r\n                  <button\r\n                    onClick={() => props.setEditing(false)}\r\n                    className=\"button is-rounded is-outlined \"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditTodoForm;\r\n","import React, { useState, Fragment, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nimport ListOfTodoTable from \"./components/tables/ListOfTodoTable\";\r\nimport AddTodoForm from \"./components/forms/AddTodoForm\";\r\nimport EditTodoForm from \"./components/forms/EditTodoForm\";\r\n\r\nconst App = () => {\r\n  const initialTodos = localStorage.getItem(\"todos\")\r\n    ? JSON.parse(localStorage.getItem(\"todos\"))\r\n    : [];\r\n\r\n  const [todos, setTodos] = useState(initialTodos);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const initialFormState = { id: new Date().getTime(), name: \"\" };\r\n\r\n  const [currentTodo, setCurrentTodo] = useState(initialFormState);\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const editRow = todo => {\r\n    setEditing(true);\r\n\r\n    setCurrentTodo({ id: todo.id, name: todo.name });\r\n  };\r\n\r\n  const addTodo = todo => {\r\n    todo.id = todos.length + 1;\r\n    setTodos([...todos, todo]);\r\n  };\r\n\r\n  const deleteTodo = id => {\r\n    setEditing(false);\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  };\r\n\r\n  const updateTodo = (id, updatedTodo) => {\r\n    setEditing(false);\r\n\r\n    setTodos(todos.map(todo => (todo.id === id ? updatedTodo : todo)));\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"box\">\r\n        {editing ? (\r\n          <Fragment>\r\n            <EditTodoForm\r\n              editing={editing}\r\n              setEditing={setEditing}\r\n              currentTodo={currentTodo}\r\n              updateTodo={updateTodo}\r\n            />\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <div className=\"column\">\r\n              <div className=\"columns is-mobile is-centered\">\r\n                <AddTodoForm addTodo={addTodo} />\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n        <div className=\"column\">\r\n          <div className=\"box2 box\">\r\n            <div className=\"title is-4 has-text-centered\">View Todos</div>\r\n            <div className=\"columns is-mobile is-centered\">\r\n              <ListOfTodoTable\r\n                todos={todos}\r\n                deleteTodo={deleteTodo}\r\n                editRow={editRow}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}